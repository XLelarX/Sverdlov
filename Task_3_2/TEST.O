   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE


   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE



(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.

(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
     END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)


      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.
(* ���⮩ �������਩ *)

(* �������� �������਩
      (* �������� �������਩ *)

      (* �������� �������਩ *)
   �������� �������਩ *)

(* �������訩 ��騩 ����⥫� *)
MODULE Euqlid;

VAR
   X, Y : INTEGER;
BEGIN
   InInt(X);
   InInt(Y);
   WHILE X # Y DO
      IF X > Y THEN
         DEC( X, Y )
      ELSE
         DEC( Y, X )
      END;
   END;
   OutInt(X, 0);
   OutLn;
END Euqlid.

MODULE Simple;
CONST
   TRUE  = 1;
   FALSE = 0;
VAR
   N     : INTEGER;
   i, d  : INTEGER;
   Simp  : INTEGER;
   Cont  : INTEGER;
   iDIV3 : INTEGER;
BEGIN
   InInt(N);
   IF N >= 2 THEN OutInt(2,8) END;
   IF N >= 3 THEN OutInt(3,8) END;
   IF N >= 5 THEN OutInt(5,8) END;
   IF N >= 7 THEN OutInt(7,8) END;
   i := 11;
   WHILE i <= N  DO
      IF i MOD 3 # 0 THEN
         d := 5;
         iDIV3 := i DIV 3;
         Simp := TRUE;
         Cont := TRUE;
         WHILE Cont = TRUE DO
            IF i MOD d = 0 THEN
               Cont := FALSE;
               Simp := FALSE
            ELSE
               INC(d,2);
               IF d > iDIV3 THEN Cont := FALSE END
            END;
         END;
         IF Simp = TRUE THEN OutInt( i, 8 ) END;
      END;
      INC(i,2);
   END;
   OutLn
END Simple.

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE

   * * * * * * * * * * * * * * * *
   * * * * * * * * * * * * * * * *
   + + + + + + + + + + + + + + + +
   + + + + + + + + + + + + + + + +
   - - - - - - - - - - - - - - - -
   - - - - - - - - - - - - - - - -
   <    < < < < < < < < < < < <
   BY
    DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO DO
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF IF
    IN IN IN IN IN IN IN IN
   IS
    OF OF OF OF OF OF OF OF OF
    OR OR OR OR OR OR OR OR OR OR OR OR OR
    TO TO TO TO TO TO TO TO TO TO
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END  END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
   END END END END END END END END END END END END END END END END END END
    FOR FOR FOR FOR FOR FOR FOR FOR FOR FOR
    MOD MOD MOD MOD MOD
   NIL
    VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
     VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR VAR
    CASE CASE CASE CASE CASE CASE CASE CASE
    ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
      ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE ELSE
   EXIT
    THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
     THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
      THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
       THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN THEN
    TYPE TYPE TYPE
   WITH
    ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY ARRAY
   BEGIN
    CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST CONST
     CONST CONST CONST CONST CONST CONST CONST
    ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
     ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF ELSIF
   IMPORT
    UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
     UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL UNTIL
    WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
     WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE WHILE
    RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD RECORD
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT REPEAT
    REPEAT REPEAT
    RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN RETURN
    POINTER POINTER POINTER
    PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
     PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE PROCEDURE
    DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV DIV
    LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
     LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP LOOP
   MODULE


